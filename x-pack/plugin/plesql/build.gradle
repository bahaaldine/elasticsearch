/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import org.elasticsearch.gradle.internal.info.BuildParams
import org.elasticsearch.gradle.internal.precommit.CheckForbiddenApisTask;
import org.elasticsearch.gradle.internal.util.SourceDirectoryCommandLineArgumentProvider;

apply plugin: 'elasticsearch.internal-es-plugin'
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.string-templates'
apply plugin: 'elasticsearch.publish'

esplugin {
  name 'x-pack-pl'
  description 'A plugin to handle PL|ES|QL queries'
  classname 'org.elasticsearch.xpack.pl.plugin.PlPlugin'
  extendedPlugins = ['x-pack-core']
}

base {
  archivesName = 'x-pack-pl'
}

dependencies {
  api "org.antlr:antlr4-runtime:${versions.antlr4}"
  api project(path: xpackModule('mapper-version'))
  compileOnly project(path: xpackModule('core'))

  testImplementation project(':test:framework')
  internalClusterTestImplementation project(":modules:mapper-extras")
}
configurations {
  regenerate
}

dependencies {
  regenerate "org.antlr:antlr4:${versions.antlr4}"
  // Other dependencies
}

String grammarPath = 'src/main/java/org/elasticsearch/xpack/pl/parser'
String outputPath = 'src/main/java/org/elasticsearch/xpack/pl/parser'

tasks.register("cleanGenerated", Delete) {
  delete fileTree(grammarPath) {
    include '*.tokens'
  }
  delete fileTree(outputPath) {
    include 'PlEsqlProcedure*.java'
  }
}

tasks.register("regenGrammar", JavaExec) {
  dependsOn "cleanGenerated"
  mainClass = 'org.antlr.v4.Tool'
  classpath = configurations.regenerate
  systemProperty 'file.encoding', 'UTF-8'
  systemProperty 'user.language', 'en'
  systemProperty 'user.country', 'US'
  systemProperty 'user.variant', ''
  args '-Werror',
    '-package', 'org.elasticsearch.xpack.pl.parser',
    '-listener',
    '-visitor',
    '-o', outputPath,
    "${file(grammarPath)}/PlEsqlProcedure.g4"  // Single grammar file
}

tasks.register("regen") {
  dependsOn "regenGrammar"
  doLast {
    // Move tokens to grammar directory
    ant.move(file: "${outputPath}/PlEsqlProcedure.tokens", toDir: grammarPath)

    // Replace the header with Elasticsearch license
    ant.replaceregexp(
      match: '// Generated from .* by ANTLR.*',  // Match the autogenerated ANTLR header more specifically
      replace: '''/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
''',
      encoding: 'UTF-8'
    ) {
      fileset(dir: outputPath, includes: 'PlEsqlProcedure*.java')
    }

    // Replace wildcard imports in PlEsqlProcedureLexer.java
    ant.replaceregexp(
      match: 'import org\\.antlr\\.v4\\.runtime\\.\\*;',
      replace: '''import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.LexerATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;''',
      encoding: 'UTF-8'
    ) {
      fileset(dir: outputPath, includes: 'PlEsqlProcedureLexer*.java')
    }

    // Replace wildcard imports in PlEsqlProcedureParser.java
    ant.replaceregexp(
      match: 'import org\\.antlr\\.v4\\.runtime\\.\\*;',
      replace: '''import org.antlr.v4.runtime.FailedPredicateException;
import org.antlr.v4.runtime.RuleContext;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;''',
      encoding: 'UTF-8'
    ) {
      fileset(dir: outputPath, includes: 'PlEsqlProcedureParser*.java')
    }
  }
}
